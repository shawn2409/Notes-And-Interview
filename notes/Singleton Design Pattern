Singleton design pattern in Java
//real world example to see javatpoint of jdbc singleton object 
https://www.javatpoint.com/singleton-design-pattern-in-java

a class must ensure that only single instance should be created and single object can be used by all other classes.

//There are two forms of singleton design pattern
Early Instantiation: creation of instance at load time.
Lazy Instantiation: creation of instance when required.

To create the singleton class, we need to have static member of class, private constructor and static factory method.

1)Static member: It gets memory only once because of static, itcontains the instance of the Singleton class.
2)Private constructor: It will prevent to instantiate the Singleton class from outside the class.
3)Static factory method: This provides the global point of access to the Singleton object and returns the instance to the caller.



//Understanding early Instantiation of Singleton Pattern
public class Singleton {

   private static Singleton singleton = new Singleton( );

   /* A private Constructor prevents any other
    * class from instantiating.
    */
   private Singleton() { }

   /* Static 'instance' method */
   public static Singleton getInstance( ) {
      return singleton;
   }

   /* Other methods protected by singleton-ness */
   protected static void demoMethod( ) {
      System.out.println("demoMethod for singleton");
   }
}

// File Name: SingletonDemo.java
public class SingletonDemo {

   public static void main(String[] args) {
      Singleton tmp = Singleton.getInstance( );
      tmp.demoMethod( );
   }
}
====================================

//Understanding lazy Instantiation of Singleton Pattern

public class ClassicSingleton {

   private static ClassicSingleton instance = null;
   private ClassicSingleton() {
      // Exists only to defeat instantiation.
   }

   public static ClassicSingleton getInstance() {
      if(instance == null) {
         instance = new ClassicSingleton();
      }
      return instance;
   }
}





